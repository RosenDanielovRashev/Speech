import streamlit as st
import time
from collections import Counter
import re

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
st.set_page_config(
    page_title="–†–µ–∞–ª–µ–Ω –¢–µ–∫—Å—Ç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä",
    page_icon="‚ö°",
    layout="wide"
)

# CSS –∑–∞ –ø–æ-–¥–æ–±—ä—Ä –≤–∏–∑—É–∞–ª–µ–Ω –≤–∏–¥
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .stats-box {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        border-left: 4px solid #1f77b4;
    }
    .real-time-badge {
        background-color: #ff4b4b;
        color: white;
        padding: 0.2rem 0.8rem;
        border-radius: 15px;
        font-size: 0.8rem;
        animation: pulse 2s infinite;
    }
    @keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.7; }
        100% { opacity: 1; }
    }
    .word-cloud {
        background-color: white;
        padding: 1rem;
        border-radius: 10px;
        border: 2px solid #e6e6e6;
    }
</style>
""", unsafe_allow_html=True)

def analyze_text_in_real_time(text):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ–∞–ª–Ω–æ –≤—Ä–µ–º–µ"""
    if not text.strip():
        return None
    
    # –û—Å–Ω–æ–≤–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    words = re.findall(r'\b\w+\b', text.lower())
    characters = len(text)
    characters_no_spaces = len(text.replace(" ", ""))
    sentences = len(re.findall(r'[.!?]+', text))
    paragraphs = len([p for p in text.split('\n') if p.strip()])
    
    # –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    unique_words = len(set(words))
    avg_word_length = sum(len(word) for word in words) / len(words) if words else 0
    avg_sentence_length = len(words) / max(sentences, 1)
    
    # –ù–∞–π-—á–µ—Å—Ç–æ —Å—Ä–µ—â–∞–Ω–∏ –¥—É–º–∏
    word_freq = Counter(words)
    common_words = word_freq.most_common(15)
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞ –∑–∞–ø—ä–ª–≤–∞–Ω–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ)
    reading_time = len(words) / 200  # 200 –¥—É–º–∏ –≤ –º–∏–Ω—É—Ç–∞
    
    return {
        'words': len(words),
        'characters': characters,
        'characters_no_spaces': characters_no_spaces,
        'sentences': sentences,
        'paragraphs': paragraphs,
        'unique_words': unique_words,
        'avg_word_length': avg_word_length,
        'avg_sentence_length': avg_sentence_length,
        'common_words': common_words,
        'reading_time': reading_time,
        'word_list': words
    }

def display_real_time_stats(stats):
    """–ü–æ–∫–∞–∑–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏—Ç–µ –≤ —Ä–µ–∞–ª–Ω–æ –≤—Ä–µ–º–µ"""
    if not stats:
        return
    
    # –û—Å–Ω–æ–≤–Ω–∏ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìù –î—É–º–∏", stats['words'])
    with col2:
        st.metric("üî§ –°–∏–º–≤–æ–ª–∏", stats['characters'])
    with col3:
        st.metric("üìä –£–Ω–∏–∫–∞–ª–Ω–∏ –¥—É–º–∏", stats['unique_words'])
    with col4:
        st.metric("‚è±Ô∏è –í—Ä–µ–º–µ –∑–∞ —á–µ—Ç–µ–Ω–µ", f"{stats['reading_time']:.1f} –º–∏–Ω")

def main():
    # –ó–∞–≥–ª–∞–≤–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞ —Ä–µ–∞–ª–Ω–æ –≤—Ä–µ–º–µ
    st.markdown("""
    <div style="display: flex; align-items: center; justify-content: center; gap: 1rem;">
        <h1 class="main-header">‚ö° –†–µ–∞–ª–µ–Ω –¢–µ–∫—Å—Ç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä</h1>
        <span class="real-time-badge">–†–ï–ê–õ–ù–û –í–†–ï–ú–ï</span>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # –°–∞–π–¥–±–∞—Ä –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –∞–Ω–∞–ª–∏–∑")
        
        analysis_depth = st.selectbox(
            "–î–µ—Ç–∞–π–ª–Ω–æ—Å—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞:",
            ["–û—Å–Ω–æ–≤–Ω–∞", "–†–∞–∑—à–∏—Ä–µ–Ω–∞", "–ü—ä–ª–Ω–∞"]
        )
        
        auto_refresh = st.checkbox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ", value=True)
        show_live_preview = st.checkbox("–ü–æ–∫–∞–∑–≤–∞–π —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ–∞–ª–Ω–æ –≤—Ä–µ–º–µ", value=True)
        show_word_cloud = st.checkbox("–ü–æ–∫–∞–∑–≤–∞–π —á–µ—Å—Ç–æ—Ç–∞ –Ω–∞ –¥—É–º–∏", value=True)
        
        if auto_refresh:
            st.info("–ê–Ω–∞–ª–∏–∑—ä—Ç —Å–µ –æ–±–Ω–æ–≤—è–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –≤—Å—è–∫–∞ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ —Ç–µ–∫—Å—Ç–∞")
        
        st.markdown("---")
        st.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.write("""
        –¢–æ–≤–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –≤–∏ –≤ **—Ä–µ–∞–ª–Ω–æ –≤—Ä–µ–º–µ**.
        
        **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
        - –ú–æ–º–µ–Ω—Ç–∞–ª–µ–Ω –∞–Ω–∞–ª–∏–∑
        - –ë–µ–∑ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ
        - –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –¥—ä–ª–∂–∏–Ω–∞ –Ω–∞ —Ç–µ–∫—Å—Ç–∞
        - –î–µ—Ç–∞–π–ª–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """)
    
    # –û—Å–Ω–æ–≤–Ω–∞ –æ–±–ª–∞—Å—Ç
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # –¢–µ–∫—Å—Ç–æ–≤–∞ –æ–±–ª–∞—Å—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ
        st.subheader("üéØ –í—ä–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞ –∞–Ω–∞–ª–∏–∑")
        
        text = st.text_area(
            "–ü–∏—à–µ—Ç–µ —Ç—É–∫:",
            height=400,
            placeholder="–ó–∞–ø–æ—á–Ω–µ—Ç–µ –¥–∞ –ø–∏—à–µ—Ç–µ... –ê–Ω–∞–ª–∏–∑—ä—Ç —â–µ —Å–µ –ø–æ–∫–∞–∂–µ –≤–µ–¥–Ω–∞–≥–∞ –≤ –¥—è—Å–Ω–∞—Ç–∞ –∫–æ–ª–æ–Ω–∞! ‚ú®",
            key="real_time_input",
            label_visibility="collapsed"
        )
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç
        if text:
            words_count = len(re.findall(r'\b\w+\b', text.lower()))
            st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ {words_count} –¥—É–º–∏ –≤ —Ä–µ–∞–ª–Ω–æ –≤—Ä–µ–º–µ!")
    
    with col2:
        st.subheader("üìä –ñ–∏–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –ê–Ω–∞–ª–∏–∑ –≤ —Ä–µ–∞–ª–Ω–æ –≤—Ä–µ–º–µ
        if text.strip():
            stats = analyze_text_in_real_time(text)
            
            if stats:
                # –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                display_real_time_stats(stats)
                
                st.markdown("---")
                
                # –î–µ—Ç–∞–π–ª–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                with st.expander("üìà –î–µ—Ç–∞–π–ª–µ–Ω –∞–Ω–∞–ª–∏–∑", expanded=True):
                    st.markdown('<div class="stats-box">', unsafe_allow_html=True)
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**–°–∏–º–≤–æ–ª–∏ –±–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏:** {stats['characters_no_spaces']}")
                        st.write(f"**–ò–∑—Ä–µ—á–µ–Ω–∏—è:** {stats['sentences']}")
                        st.write(f"**–ü–∞—Ä–∞–≥—Ä–∞—Ñ–∏:** {stats['paragraphs']}")
                    
                    with col2:
                        st.write(f"**–°—Ä–µ–¥–Ω–∞ –¥—ä–ª–∂–∏–Ω–∞ –Ω–∞ –¥—É–º–∞:** {stats['avg_word_length']:.1f}")
                        st.write(f"**–°—Ä–µ–¥–Ω–∞ –¥—ä–ª–∂–∏–Ω–∞ –Ω–∞ –∏–∑—Ä–µ—á–µ–Ω–∏–µ:** {stats['avg_sentence_length']:.1f} –¥—É–º–∏")
                    
                    st.markdown('</div>', unsafe_allow_html=True)
                
                # –ß–µ—Å—Ç–æ—Ç–∞ –Ω–∞ –¥—É–º–∏
                if show_word_cloud and stats['common_words']:
                    with st.expander("üî§ –ß–µ—Å—Ç–æ —Å—Ä–µ—â–∞–Ω–∏ –¥—É–º–∏", expanded=True):
                        st.markdown('<div class="word-cloud">', unsafe_allow_html=True)
                        for word, count in stats['common_words'][:10]:
                            # –°—ä–∑–¥–∞–≤–∞–º–µ –≤–∏–∑—É–∞–ª–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞ —á–µ—Å—Ç–æ—Ç–∞
                            percentage = (count / stats['words']) * 100
                            st.write(
                                f"`{word}`: {count} –ø—ä—Ç–∏ ({percentage:.1f}%)"
                            )
                        st.markdown('</div>', unsafe_allow_html=True)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ø–ª—ä—Ç–Ω–æ—Å—Ç
                with st.expander("üìä –ü–ª—ä—Ç–Ω–æ—Å—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–∞"):
                    if stats['words'] > 0:
                        diversity_ratio = stats['unique_words'] / stats['words']
                        st.write(f"**–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –Ω–∞ –¥—É–º–∏:** {diversity_ratio:.2%}")
                        
                        if diversity_ratio > 0.7:
                            st.info("üéØ –¢–µ–∫—Å—Ç—ä—Ç –∏–º–∞ –≤–∏—Å–æ–∫–æ –ª–µ–∫—Å–∏–∫–∞–ª–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ")
                        elif diversity_ratio > 0.4:
                            st.info("üìù –¢–µ–∫—Å—Ç—ä—Ç –∏–º–∞ —Å—Ä–µ–¥–Ω–æ –ª–µ–∫—Å–∏–∫–∞–ª–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ")
                        else:
                            st.info("üîÅ –¢–µ–∫—Å—Ç—ä—Ç –∏–º–∞ –Ω–∏—Å–∫–æ –ª–µ–∫—Å–∏–∫–∞–ª–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ")
        
        else:
            # –°—ä–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–∞—Ç–æ –Ω—è–º–∞ —Ç–µ–∫—Å—Ç
            st.info("üí° –ó–∞–ø–æ—á–Ω–µ—Ç–µ –¥–∞ –ø–∏—à–µ—Ç–µ –≤ –ª—è–≤–∞—Ç–∞ –∫–æ–ª–æ–Ω–∞...")
            st.markdown("""
            **–©–µ –≤–∏–¥–∏—Ç–µ —Ç—É–∫:**
            - –ë—Ä–æ–π –¥—É–º–∏ –∏ —Å–∏–º–≤–æ–ª–∏
            - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —á–µ—Ç–µ–Ω–µ
            - –ß–µ—Å—Ç–æ —Å—Ä–µ—â–∞–Ω–∏ –¥—É–º–∏
            - –ò –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏...
            """)
    
    # –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ —Å–µ–∫—Ü–∏—è –∑–∞ –ø—Ä–µ–≥–ª–µ–¥ –Ω–∞ —Ç–µ–∫—Å—Ç–∞
    if text and show_live_preview:
        st.markdown("---")
        st.subheader("üëÅÔ∏è –ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ —Ç–µ–∫—Å—Ç–∞")
        
        # –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç–∞ —Å –Ω–æ–º–µ—Ä–∞ –Ω–∞ —Ä–µ–¥–æ–≤–µ
        lines = text.split('\n')
        preview_text = ""
        for i, line in enumerate(lines, 1):
            preview_text += f"{i:3d}. {line}\n"
        
        st.text_area(
            "–¢–µ–∫—É—â —Ç–µ–∫—Å—Ç:",
            preview_text,
            height=200,
            key="preview_area",
            label_visibility="collapsed"
        )

if __name__ == "__main__":
    main()
